{"ast":null,"code":"var _jsxFileName = \"/Users/avryjackson/Desktop/algorithm-visualizer/src/pages/Stack.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './StackVisualization.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function StackVisualization() {\n  _s();\n  const [stack, setStack] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n\n  // Function to push an element onto the stack\n  const pushToStack = () => {\n    if (inputValue) {\n      setStack([...stack, inputValue]);\n      setInputValue(\"\");\n    }\n  };\n\n  // Function to pop an element from the stack\n  const popFromStack = () => {\n    setStack(stack.slice(0, -1));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container text-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Stack Visualization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: e => setInputValue(e.target.value),\n        placeholder: \"Enter a value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: pushToStack,\n        children: \"Push\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: popFromStack,\n        children: \"Pop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stack-container\",\n      children: stack.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stack-item\",\n        children: item\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n_s(StackVisualization, \"V/KesSRwllpZ7C3T2oE+SrGaj2g=\");\n_c = StackVisualization;\nvar _c;\n$RefreshReg$(_c, \"StackVisualization\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","StackVisualization","_s","stack","setStack","inputValue","setInputValue","pushToStack","popFromStack","slice","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","map","item","index","_c","$RefreshReg$"],"sources":["/Users/avryjackson/Desktop/algorithm-visualizer/src/pages/Stack.js"],"sourcesContent":["\nimport React, { useState } from 'react';\nimport './StackVisualization.css';\n\nexport default function StackVisualization() {\n  const [stack, setStack] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n\n  // Function to push an element onto the stack\n  const pushToStack = () => {\n    if (inputValue) {\n      setStack([...stack, inputValue]);\n      setInputValue(\"\");\n    }\n  };\n\n  // Function to pop an element from the stack\n  const popFromStack = () => {\n    setStack(stack.slice(0, -1));\n  };\n\n  return (\n    <div className=\"container text-center\">\n      <h1>Stack Visualization</h1>\n      <div className=\"input-section\">\n        <input \n          type=\"text\" \n          value={inputValue} \n          onChange={(e) => setInputValue(e.target.value)} \n          placeholder=\"Enter a value\"\n        />\n        <button onClick={pushToStack}>Push</button>\n        <button onClick={popFromStack}>Pop</button>\n      </div>\n\n      <div className=\"stack-container\">\n        {stack.map((item, index) => (\n          <div key={index} className=\"stack-item\">\n            {item}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,eAAe,SAASC,kBAAkBA,CAAA,EAAG;EAAAC,EAAA;EAC3C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACO,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;;EAEhD;EACA,MAAMS,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAIF,UAAU,EAAE;MACdD,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAEE,UAAU,CAAC,CAAC;MAChCC,aAAa,CAAC,EAAE,CAAC;IACnB;EACF,CAAC;;EAED;EACA,MAAME,YAAY,GAAGA,CAAA,KAAM;IACzBJ,QAAQ,CAACD,KAAK,CAACM,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EAC9B,CAAC;EAED,oBACET,OAAA;IAAKU,SAAS,EAAC,uBAAuB;IAAAC,QAAA,gBACpCX,OAAA;MAAAW,QAAA,EAAI;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC5Bf,OAAA;MAAKU,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAC5BX,OAAA;QACEgB,IAAI,EAAC,MAAM;QACXC,KAAK,EAAEZ,UAAW;QAClBa,QAAQ,EAAGC,CAAC,IAAKb,aAAa,CAACa,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAC/CI,WAAW,EAAC;MAAe;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5B,CAAC,eACFf,OAAA;QAAQsB,OAAO,EAAEf,WAAY;QAAAI,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC3Cf,OAAA;QAAQsB,OAAO,EAAEd,YAAa;QAAAG,QAAA,EAAC;MAAG;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CAAC,eAENf,OAAA;MAAKU,SAAS,EAAC,iBAAiB;MAAAC,QAAA,EAC7BR,KAAK,CAACoB,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACrBzB,OAAA;QAAiBU,SAAS,EAAC,YAAY;QAAAC,QAAA,EACpCa;MAAI,GADGC,KAAK;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACb,EAAA,CAxCuBD,kBAAkB;AAAAyB,EAAA,GAAlBzB,kBAAkB;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}